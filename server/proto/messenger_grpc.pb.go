// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: messenger.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessangerClient is the client API for Messanger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessangerClient interface {
	SendMessage(ctx context.Context, in *MessageSendRequest, opts ...grpc.CallOption) (*MessageSendResponse, error)
	GetMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Messanger_GetMessagesClient, error)
}

type messangerClient struct {
	cc grpc.ClientConnInterface
}

func NewMessangerClient(cc grpc.ClientConnInterface) MessangerClient {
	return &messangerClient{cc}
}

func (c *messangerClient) SendMessage(ctx context.Context, in *MessageSendRequest, opts ...grpc.CallOption) (*MessageSendResponse, error) {
	out := new(MessageSendResponse)
	err := c.cc.Invoke(ctx, "/messanger.Messanger/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messangerClient) GetMessages(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Messanger_GetMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Messanger_ServiceDesc.Streams[0], "/messanger.Messanger/GetMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &messangerGetMessagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Messanger_GetMessagesClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messangerGetMessagesClient struct {
	grpc.ClientStream
}

func (x *messangerGetMessagesClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessangerServer is the server API for Messanger service.
// All implementations should embed UnimplementedMessangerServer
// for forward compatibility
type MessangerServer interface {
	SendMessage(context.Context, *MessageSendRequest) (*MessageSendResponse, error)
	GetMessages(*emptypb.Empty, Messanger_GetMessagesServer) error
}

// UnimplementedMessangerServer should be embedded to have forward compatible implementations.
type UnimplementedMessangerServer struct {
}

func (UnimplementedMessangerServer) SendMessage(context.Context, *MessageSendRequest) (*MessageSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessangerServer) GetMessages(*emptypb.Empty, Messanger_GetMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetMessages not implemented")
}

// UnsafeMessangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessangerServer will
// result in compilation errors.
type UnsafeMessangerServer interface {
	mustEmbedUnimplementedMessangerServer()
}

func RegisterMessangerServer(s grpc.ServiceRegistrar, srv MessangerServer) {
	s.RegisterService(&Messanger_ServiceDesc, srv)
}

func _Messanger_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessangerServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messanger.Messanger/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessangerServer).SendMessage(ctx, req.(*MessageSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messanger_GetMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessangerServer).GetMessages(m, &messangerGetMessagesServer{stream})
}

type Messanger_GetMessagesServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messangerGetMessagesServer struct {
	grpc.ServerStream
}

func (x *messangerGetMessagesServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Messanger_ServiceDesc is the grpc.ServiceDesc for Messanger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Messanger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messanger.Messanger",
	HandlerType: (*MessangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendMessage",
			Handler:    _Messanger_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMessages",
			Handler:       _Messanger_GetMessages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "messenger.proto",
}
